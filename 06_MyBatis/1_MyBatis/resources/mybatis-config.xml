<?xml version="1.0" encoding="UTF-8"?>
<!-- 아래 코드를 이용하여 config 파일임을 명시하여야 함, 구분할 수 있도록 식별자를 넣어 줌 -->
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!-- config라는 파일에 대한 가장 상위 태그 -->

<!-- 
	The content of element type "configuration" must match 
	 "(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)".
	태그 순서는 위 순서로 작성하여야 한다 -> properties 태그를 environments 밑에 위치시켰기 때문에 에러 발생
 -->
 
 	<!-- 외부에 있는 properties 파일을 읽어오는 태그 -->	
	<properties resource="/driver.properties"/>
	
	<settings>
		<!-- 값이 없는 경우 빈칸으로 넣지 않고 무조건 NULL이 들어가도록 함, 이때 value로는 소문자 null이 아니라 대문자 null이 들어가야 함 -> 소문자 null은 인지 못 함 -->
		<setting name="jdbcTypeForNull" value="NULL"/>
	</settings>
	
	<!-- 타입에 대한 별칭을 지정하는 태그 -->
	<typeAliases>
		<typeAlias type="member.model.vo.Member" alias="Member"/>
		<typeAlias type="board.model.vo.Board" alias="Board"/>
		<typeAlias type="board.model.vo.Reply" alias="Reply"/>
	</typeAliases>
	
	<!-- DB에 연결할 설정에 대한 정보를 선언 -->
	<environments default="development">
	<!-- default : 연결 설정을 여러 개 생성하여 아이디로 구분해 놓고, 기본으로 연결할 id 속성 설정 -->
		
		<!-- Database에 연결할 정보가 이 안에 실질적으로 담기게 됨 -->
		<environment id="development">
			
			<!-- transaction을 누가 관리할 것인가에 대한 설정 -->
			<transactionManager type="JDBC"/>
			<!-- 
				- JDBC    : JDBC가 커밋과 롤백을 직접 처리, 수동으로 commit을 하게 됨
				- MANAGED : 커밋이나 롤백을 직접적으로 하지 않는 대신 컨테이너가 트랜잭션의 모든 생명 주기 관리, 자동 commit
			 -->
			 
			 <!-- 실제 DB 접속에 관한 정보들을 넣는 태그 -->
			 <dataSource type="POOLED">
			 	<!-- 
			 		type 속성은 ConnectionPool 사용 여부에 관한 설정
			 		- POOLED   : 커넥션 객체를 미리 만들어 놓고 관리해서 꺼내 쓰기 때문에 객체를 만드는 시간을 줄일 수 있음
			 		          	  사용자의 요청이 들어왔을 때 DB에 연결하여 명령을 실행하고, 명령이 종료되어도 연결이 끊기지 않고 pool에 저장하여 요청이 올 때마다 pool에서 커넥션을 꺼내 재사용
			 		          	 (웹서비스에서는 커넥션 풀을 이용하는 것이 좋음)
			 		- UNPOOLED : DB 요청이 올 때마다 실시간으로 커넥션 객체를 만들고 닫아 줌
			 		           	  미리 커넥션 객체를 만들어 놓는 방식이 아니기 때문에 조금 느릴 수 있음
			 		           	 (데이터 조회/수정/삭제/삽입 요청 시 딜레이가 생겨도 문제 없는 간단한 애플리케이션에 적당)
			 	 -->
				 	 
<!-- 				 	 <property name="driver" value="oracle.jdbc.driver.OracleDriver"/> -->
<!-- 				 	 <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/> -->
<!-- 				 	 <property name="username" value="MyBatis"/> -->
<!-- 				 	 <property name="password" value="MyBatis"/> -->
				 <!-- 프로퍼티로 값 가지고 오기 -->
			 	 <property name="driver" value="${driver}"/>
			 	 <property name="url" value="${url}"/>
			 	 <property name="username" value="${username}"/>
			 	 <property name="password" value="${password}"/>
			 	 <!-- ${}는 해당 xml에서 사용할 수 있는 expression language로 JSP의 EL과 형태는 같으나 호환되는 것은 아님 -->
			 </dataSource>
		</environment>
	</environments>
	
	<!-- mapper 파일들을 등록 -->
	<mappers>
		<mapper resource="/mappers/member-mapper.xml"/>
		<mapper resource="mappers/board-mapper.xml"/>
		<!-- 맨 앞의 /는 있어도 되고 없어도 됨 -->
	</mappers>
	
</configuration>