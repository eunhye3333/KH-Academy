-- DDL
-- 1. 계열 정보를 저장할 카테고리 테이블 만들기
CREATE TABLE TB_CATEGORY(
    NAME VARCHAR2(10),
    USE_YN CHAR(1) DEFAULT 'Y'
);

-- 2. 과목 구분을 저장할 테이블 만들기
CREATE TABLE TB_CLASS_TYPE(
    NO VARCHAR2(5) PRIMARY KEY,
    NAME VARCHAR2(10)
);

-- 3. TB_CATEGORY 테이블의 NAME 컬럼에 PRIMARY KEY 생성
ALTER TABLE TB_CATEGORY ADD CONSTRAINT PK_TC_NAME PRIMARY KEY(NAME);

-- 4. TB_CLASS_TYPE 테이블의 NAME 컬럼에 NULL 값이 들어가지 않도록 하기
ALTER TABLE TB_CLASS_TYPE MODIFY NAME CONSTRAINT NN_TCT_NAME NOT NULL;

-- 5. 두 테이블에서 컬럼 명이 NO인 것은 기존 타입을 유지하면서 크기를 10으로, 컬럼 명이 NAME인 것은 기존 타입을 유지하면서 20으로 변경
ALTER TABLE TB_CATEGORY
MODIFY NAME VARCHAR2(20);

ALTER TABLE TB_CLASS_TYPE
MODIFY NO VARCHAR2(10)
MODIFY NAME VARCHAR2(20);

-- 6. 두 테이블의 NO 컬럼과 NAME 컬럼의 이름을 각각 TB_를 제외한 테이블 이름이 앞에 붙은 형태로 만들기
ALTER TABLE TB_CATEGORY
RENAME COLUMN NAME TO CATEGORY_NAME;

ALTER TABLE TB_CLASS_TYPE
RENAME COLUMN NAME TO CLASS_TYPE_NAME;
ALTER TABLE TB_CLASS_TYPE
RENAME COLUMN NO TO CLASS_TYPE_NO;

-- 7. TB_CATEGORY, TB_CLASS_TYPE 테이블의 PRIMARY KEY 이름 변경
SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TB_CATEGORY'
      AND CONSTRAINT_TYPE = 'P';

ALTER TABLE TB_CATEGORY
RENAME CONSTRAINT PK_TC_NAME TO PK_CATEGORY_NAME;

SELECT * FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'TB_CLASS_TYPE'
      AND CONSTRAINT_TYPE = 'P';

ALTER TABLE TB_CLASS_TYPE
RENAME CONSTRAINT SYS_C007710 TO PK_CLASS_TYPE_NO;

-- 8. INSERT문 수행
INSERT INTO TB_CATEGORY VALUES('공학', 'Y');
INSERT INTO TB_CATEGORY VALUES('자연과학', 'Y');
INSERT INTO TB_CATEGORY VALUES('의학', 'Y');
INSERT INTO TB_CATEGORY VALUES('예체능', 'Y');
INSERT INTO TB_CATEGORY VALUES('인문사회', 'Y');

COMMIT;

-- 9. TB_DEPARTMENT의 CATEGORY 컬럼이 TB_CATEGORY 테이블의 CATEGORY_NAME 컬럼을 부모 값으로 참조하도록 FOREING KEY 지정
ALTER TABLE TB_DEPARTMENT ADD CONSTRAINT FK_DEPARTMENT_CATEGORY FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(CATEGORY_NAME);

-- 10. 춘 기술대학교 학생들의 정보만이 포함되어 있는 학생일반정보 VIEW 만들기
GRANT CREATE VIEW TO CHOON;

CREATE OR REPLACE VIEW VW_학생일반정보
AS
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
FROM TB_STUDENT;

SELECT * FROM VW_학생일반정보;

-- 11. 학생과 지도 교수의 면담을 위한 VIEW 생성, 학과 별로 정렬
CREATE OR REPLACE VIEW VW_지도면담
AS
SELECT STUDENT_NAME, DEPARTMENT_NAME, PROFESSOR_NAME
FROM TB_STUDENT
     JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
     LEFT JOIN TB_PROFESSOR ON(COACH_PROFESSOR_NO = PROFESSOR_NO)
ORDER BY 2;

SELECT * FROM VW_지도면담;

-- 12. 모든 학과의 학과별 학생 수를 확인할 수 있는 VIEW 생성
CREATE OR REPLACE VIEW VW_학과별학생수
AS
SELECT DEPARTMENT_NAME, COUNT(STUDENT_NO) STUDENT_COUNT
FROM TB_STUDENT
     JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
GROUP BY DEPARTMENT_NAME;

SELECT * FROM VW_학과별학생수;

-- 13. 학생일반정보 VIEW 를 이용해 학번이 A213046인 학생의 이름을 내 이름으로 변경
UPDATE VW_학생일반정보 
SET STUDENT_NAME = '김철수' 
WHERE STUDENT_NO = 'A213046';

SELECT * FROM VW_학생일반정보 WHERE STUDENT_NO = 'A213046';
ROLLBACK;

-- 14. VIEW를 통해 데이터가 변경될 수 있는 상황을 막는 방법
CREATE OR REPLACE VIEW VW_학과별학생수
AS
SELECT DEPARTMENT_NAME, COUNT(STUDENT_NO) STUDENT_COUNT
FROM TB_STUDENT
     JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
GROUP BY DEPARTMENT_NAME
WITH READ ONLY;

-- 15. 최근 3년 기준 수강 인원이 가장 많았던 3과목 출력
SELECT ROWNUM, CLASS_NO, CLASS_NAME, "누적수강생수(명)"
FROM (SELECT CLASS_NO, CLASS_NAME, COUNT(*) "누적수강생수(명)"
      FROM TB_GRADE
           JOIN TB_CLASS USING(CLASS_NO)
      WHERE SUBSTR(TERM_NO, 1, 4) IN (SELECT 년도
                                      FROM (SELECT DISTINCT SUBSTR(TERM_NO, 1, 4) 년도
                                            FROM TB_GRADE
                                            ORDER BY 년도 DESC)
                                      WHERE ROWNUM <= 3)
      GROUP BY CLASS_NO, CLASS_NAME
      ORDER BY 3 DESC)
WHERE ROWNUM <= 3;


